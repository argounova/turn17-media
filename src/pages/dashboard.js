import axios from 'axios'
import { useState, useEffect } from 'react'
import { hasToken } from '../../utils/userAuth'
import styles from '@/styles/my-profile.module.css'
import Head from 'next/head'
import PayDeposit from '../../components/PayDeposit'
import Schedule from '../../components/SelectSchedule'
import TopNavigation from '../../components/TopNavigation'
import Footer from '../../components/Footer/Footer'
import { getSession, useSession, signOut } from 'next-auth/react'
import {
  Box,
  Button,
  Collapse,
  Container,
  Divider,
  IconButton,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ListSubheader,
  Menu,
  MenuItem,
  Toolbar
} from '@mui/material'


export async function getServerSideProps(context) {
  const token = await hasToken(context.req)
  if(!token) {
    return {
      redirect: {
        destination: '/invalid',
        permanent: false
      }
    }
  }
  return { props: {} }
}

const MyProfile = () => {
  const { data: session } = useSession()
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(false)
 
  require('dotenv').config()
  const mongokey = process.env.MONGODB_API

  const getUser = async () => {
    const userEmail = session?.user.email
    try {
      const userData = await axios.post('https://us-east-1.aws.data.mongodb-api.com/app/data-fqccm/endpoint/data/v1/action/findOne',
      {
        dataSource: "Turn17",
        database:"turn17_media",
        collection: "users",
        filter: {
          email: userEmail,
        }, 
      },
      {
        apiKey: "A3FsMAKIddcQbk7YT1bLrrOgXJCA75jSt39Xw5vLxXaA1l3daRXIou5xLFfko36B",
      }
      )
      console.log(userData)
    } catch (error) {
      console.log(error )
    }
  }

  useEffect(() => {
    setLoading(true)
    fetch('/api/routes/profile-data')
      .then((res) => res.json())
      .then((data) => {
        setData(data)
        setLoading(false)
      })
  }, [])

  useEffect(() => {
    getUser()
  }, [])
 
  if (isLoading) return (
    <>
      <Head>
        <title>My Profile | Turn17 Media</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/turn17-media-tab-logo.jpg" />
      </Head>
      <TopNavigation />
      <Container sx={{ mt: 20, display: 'flex', justifyContent: 'center', alignItems: 'center' }} maxWidth='xl'>
        <h1>Loading...</h1>
      </Container>
      <Footer />
    </>
  )
  
  if (!data) return (
    <>
      <Head>
        <title>My Profile | Turn17 Media</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/turn17-media-tab-logo.jpg" />
      </Head>
      <TopNavigation />
      <Container sx={{ minHeight: '50vh', mt: 20, display: 'flex', justifyContent: 'center', alignItems: 'center' }} maxWidth='xl'>
        <h1>Profile does not exist!</h1>
      </Container>
      <Footer />
    </>
  )

  return (
    <>
      <Head>
        <title>My Profile | Turn17 Media</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/turn17-media-tab-logo.jpg" />
      </Head>
      <TopNavigation />
      <Container sx={{ mt: 20, display: 'flex', justifyContent: 'space-between' }} maxWidth='xl'>
        <Box>
          <h2>Welcome, {session?.user.name}</h2>
          <Box>
          {/* {userSelections.map((selection, index) => (
            <div key={index}>
                    ))}
                  </ListItem>
                </List>
              </Box>
            </div>
          */}
            <List component="nav" aria-label="mailbox folders">
              <ListItem>
                <ListItemText>
                  <h4>My current project: Spec Class Website</h4>
                </ListItemText>
              </ListItem>
              <ListItem >
                {/* <ListItemText primary={`Template Selection: ${selection.template}`} /> */}
                <ListItemText primary='Template Selection: Spitfire' />
              </ListItem>
              <Divider />
              <ListItem>
                {/* <ListItemText primary={`Color Choices: ${selection.colorChoices.map(element => ` ${element.colorChoice}`)}`} /> */}
                <ListItemText primary='Color Choices: Blue, Red, Yellow' />
              </ListItem>
              <ListItem>
                {/* <ListItemText primary={`Color choices bypassed? ${selection.colorBypass}`} /> */}
                <ListItemText primary='Color Choices bypassed? False' />
              </ListItem>
              <Divider />
              <ListItem >
                {/* <ListItemText primary={`Font Choices: ${selection.fontChoices.map(element => ` ${element.fontChoice}`)}`} /> */}
                <ListItemText primary='Font Choices: Oxygen, Bungee' />
              </ListItem>
              <ListItem>
                {/* <ListItemText primary={`Font choices bypassed? ${selection.fontBypass}`} /> */}
                <ListItemText primary='Font Choices bypassed? False' />
              </ListItem>
              <Divider />
              <ListItem >
                {/* <ListItemText primary={`Nav Links: ${selection.navLinks.map(element => ` ${element.navLink}`)}`} /> */}
                <ListItemText primary='Nav Links: Home, About, Gallery' />
              </ListItem>
              <Divider />
              <ListItem sx={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                <ListItemText primary='Content' />
                {/* {selection.contentArea.map((element, index) => (
                  <ListItemText key={index} primary={`${element.contentItem}`} />
                ))} */}
              </ListItem>
              <Divider />

              </List>
            </Box>
        </Box>
        <Box style={{ display: 'flex' }} gap={4}>
          <Box style={{ display: 'flex', flexDirection: 'column' }} gap={2}>
            <Button variant='contained' style={{ backgroundColor: 'var(--mb1-4)', color: 'var(--char5)', fontSize: '20px', width: '200px', height: '100px' }} href='/get-started'>New Project</Button>
            <Button variant='contained' style={{ fontSize: '20px', width: '200px', height: '100px' }} disabled>Edit Project</Button>
          </Box>
          <Box style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', width: '400px' }} gap={2}>
            <h4>Balance Due</h4>
            <h4>$0.00</h4>
            <Button variant='contained' style={{ width: '200px' }} disabled>Pay Balance</Button>
            <PayDeposit />
            <Button variant='contained' style={{ backgroundColor: 'var(--mb1-1)', width: '200px' }}>View Invoice</Button>
            <p>Status: Not started</p>
            <p>Current completion date: 00/00/2023</p>
            <p style={{ color: 'greenyellow' }}>ON TRACK</p>
          </Box>
        </Box>
      </Container>
      <Schedule />
      <Footer />
    </>
  )
}

export default MyProfile